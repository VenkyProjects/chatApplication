{"ast":null,"code":"// // import React, { useEffect, useState } from \"react\";\n// // import ScrollToBottom from 'react-scroll-to-bottom';\n\n// // function Chat({socket,username,room}){\n// //     const[currentMessage,setCurrentMessage]=useState(\"\");\n// //     const[messageList,setMessageList]=useState([]);\n\n// //     const sendMessage = async() => {\n// //         if(currentMessage!==\" \"){\n// //             const messageData={\n// //                 room:room,\n// //                 author:username,\n// //                 message:currentMessage,\n// //                 time:new Date(Date.now()).getHours()+\":\"+new Date(Date.now()).getMinutes(),\n// //             }\n// //             await socket.emit(\"send_message\",messageData)\n// //             setMessageList((list)=>[...list,messageData])\n// //             setCurrentMessage(\"\")\n// //         }\n\n// //     };\n\n// //     useEffect(()=>{\n// //         socket.on(\"recieve_message\",(data)=>{\n// //             setMessageList((list)=>[...list,data])\n// //             console.log(data);\n// //         })\n// //     },[socket])\n// //     console.log(messageList,'messageList');\n\n// //     return (\n// //         <div className=\"chat-window\">\n// //             <div className=\"chat-header\">\n// //                 <p>Live Chat</p>\n// //             </div>\n// //             <div className=\"chat-body\">\n// //                 <ScrollToBottom className=\"message-container\">\n// //                 {messageList.map((messageContent,index)=>{\n// //                     return <div key={index} className=\"message\" id={username===messageContent.author? \"you\":\"other\"}>\n// //                         <div>\n// //                             <div className=\"message-content\">\n// //                                 <p key={messageContent.author}>{messageContent.message}</p>\n// //                             </div>\n// //                             <div className=\"message-meta\">\n// //                                 <p id=\"time\">{messageContent.time}</p>\n// //                                 <p id=\"author\">{messageContent.author}</p>\n// //                             </div>\n// //                         </div>\n// //                     </div>\n// //                 })}\n// //                 </ScrollToBottom>\n// //             </div>\n// //             <div className=\"chat-footer\">\n// //                 <input \n// //                     type=\"text\" \n// //                     value={currentMessage}\n// //                     placeholder=\"enter message...\"\n// //                     onChange={(event)=>setCurrentMessage(event.target.value)}\n// //                 />\n// //                 <button onClick={sendMessage}>&#9658;</button>\n// //             </div>\n// //         </div>\n// //     )\n// // };\n\n// // export default Chat;\n// import React, { useEffect, useState } from \"react\";\n// import ScrollToBottom from \"react-scroll-to-bottom\";\n\n// function Chat({ socket, username, room }) {\n//   const [currentMessage, setCurrentMessage] = useState(\"\");\n//   const [messageList, setMessageList] = useState([]);\n\n//   const sendMessage = async () => {\n//     if (currentMessage !== \"\") {\n//       const messageData = {\n//         room: room,\n//         author: username,\n//         message: currentMessage,\n//         time:\n//           new Date(Date.now()).getHours() +\n//           \":\" +\n//           new Date(Date.now()).getMinutes(),\n//       };\n\n//       await socket.emit(\"send_message\", messageData);\n//       setMessageList((list) => [...list, messageData]);\n//       setCurrentMessage(\"\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     socket.on(\"receive_message\", (data) => {\n//       setMessageList((list) => [...list, data]);\n//     });\n//   }, [socket]);\n\n//   return (\n//     <div className=\"chat-window\">\n//       <div className=\"chat-header\">\n//         <p>Live Chat</p>\n//       </div>\n//       <div className=\"chat-body\">\n//         <ScrollToBottom className=\"message-container\">\n//           {messageList.map((messageContent) => {\n//             return (\n//               <div\n//                 className=\"message\"\n//                 id={username === messageContent.author ? \"you\" : \"other\"}\n//               >\n//                 <div>\n//                   <div className=\"message-content\">\n//                     <p>{messageContent.message}</p>\n//                   </div>\n//                   <div className=\"message-meta\">\n//                     <p id=\"time\">{messageContent.time}</p>\n//                     <p id=\"author\">{messageContent.author}</p>\n//                   </div>\n//                 </div>\n//               </div>\n//             );\n//           })}\n//         </ScrollToBottom>\n//       </div>\n//       <div className=\"chat-footer\">\n//         <input\n//           type=\"text\"\n//           value={currentMessage}\n//           placeholder=\"Hey...\"\n//           onChange={(event) => {\n//             setCurrentMessage(event.target.value);\n//           }}\n//         />\n//         <button onClick={sendMessage}>&#9658;</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Chat;\nconst express = require(\"express\");\nconst app = express();\nconst http = require(\"http\");\nconst cors = require(\"cors\");\nconst {\n  Server\n} = require(\"socket.io\");\napp.use(cors());\nconst server = http.createServer(app);\nconst io = new Server(server, {\n  cors: {\n    origin: \"http://localhost:3000\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\nio.on(\"connection\", socket => {\n  console.log(`User Connected: ${socket.id}`);\n  socket.on(\"join_room\", data => {\n    socket.join(data);\n    console.log(`User with ID: ${socket.id} joined room: ${data}`);\n  });\n  socket.on(\"send_message\", data => {\n    socket.to(data.room).emit(\"receive_message\", data);\n  });\n  socket.on(\"disconnect\", () => {\n    console.log(\"User Disconnected\", socket.id);\n  });\n});\nserver.listen(3001, () => {\n  console.log(\"SERVER RUNNING\");\n});","map":{"version":3,"names":["express","require","app","http","cors","Server","use","server","createServer","io","origin","methods","on","socket","console","log","id","data","join","to","room","emit","listen"],"sources":["/Users/sunkevenkateswarlu/Desktop/chatApplication/client/src/Chat.js"],"sourcesContent":["// // import React, { useEffect, useState } from \"react\";\n// // import ScrollToBottom from 'react-scroll-to-bottom';\n\n// // function Chat({socket,username,room}){\n// //     const[currentMessage,setCurrentMessage]=useState(\"\");\n// //     const[messageList,setMessageList]=useState([]);\n    \n// //     const sendMessage = async() => {\n// //         if(currentMessage!==\" \"){\n// //             const messageData={\n// //                 room:room,\n// //                 author:username,\n// //                 message:currentMessage,\n// //                 time:new Date(Date.now()).getHours()+\":\"+new Date(Date.now()).getMinutes(),\n// //             }\n// //             await socket.emit(\"send_message\",messageData)\n// //             setMessageList((list)=>[...list,messageData])\n// //             setCurrentMessage(\"\")\n// //         }\n        \n// //     };\n\n// //     useEffect(()=>{\n// //         socket.on(\"recieve_message\",(data)=>{\n// //             setMessageList((list)=>[...list,data])\n// //             console.log(data);\n// //         })\n// //     },[socket])\n// //     console.log(messageList,'messageList');\n\n\n// //     return (\n// //         <div className=\"chat-window\">\n// //             <div className=\"chat-header\">\n// //                 <p>Live Chat</p>\n// //             </div>\n// //             <div className=\"chat-body\">\n// //                 <ScrollToBottom className=\"message-container\">\n// //                 {messageList.map((messageContent,index)=>{\n// //                     return <div key={index} className=\"message\" id={username===messageContent.author? \"you\":\"other\"}>\n// //                         <div>\n// //                             <div className=\"message-content\">\n// //                                 <p key={messageContent.author}>{messageContent.message}</p>\n// //                             </div>\n// //                             <div className=\"message-meta\">\n// //                                 <p id=\"time\">{messageContent.time}</p>\n// //                                 <p id=\"author\">{messageContent.author}</p>\n// //                             </div>\n// //                         </div>\n// //                     </div>\n// //                 })}\n// //                 </ScrollToBottom>\n// //             </div>\n// //             <div className=\"chat-footer\">\n// //                 <input \n// //                     type=\"text\" \n// //                     value={currentMessage}\n// //                     placeholder=\"enter message...\"\n// //                     onChange={(event)=>setCurrentMessage(event.target.value)}\n// //                 />\n// //                 <button onClick={sendMessage}>&#9658;</button>\n// //             </div>\n// //         </div>\n// //     )\n// // };\n\n// // export default Chat;\n// import React, { useEffect, useState } from \"react\";\n// import ScrollToBottom from \"react-scroll-to-bottom\";\n\n// function Chat({ socket, username, room }) {\n//   const [currentMessage, setCurrentMessage] = useState(\"\");\n//   const [messageList, setMessageList] = useState([]);\n\n//   const sendMessage = async () => {\n//     if (currentMessage !== \"\") {\n//       const messageData = {\n//         room: room,\n//         author: username,\n//         message: currentMessage,\n//         time:\n//           new Date(Date.now()).getHours() +\n//           \":\" +\n//           new Date(Date.now()).getMinutes(),\n//       };\n\n//       await socket.emit(\"send_message\", messageData);\n//       setMessageList((list) => [...list, messageData]);\n//       setCurrentMessage(\"\");\n//     }\n//   };\n\n//   useEffect(() => {\n//     socket.on(\"receive_message\", (data) => {\n//       setMessageList((list) => [...list, data]);\n//     });\n//   }, [socket]);\n\n//   return (\n//     <div className=\"chat-window\">\n//       <div className=\"chat-header\">\n//         <p>Live Chat</p>\n//       </div>\n//       <div className=\"chat-body\">\n//         <ScrollToBottom className=\"message-container\">\n//           {messageList.map((messageContent) => {\n//             return (\n//               <div\n//                 className=\"message\"\n//                 id={username === messageContent.author ? \"you\" : \"other\"}\n//               >\n//                 <div>\n//                   <div className=\"message-content\">\n//                     <p>{messageContent.message}</p>\n//                   </div>\n//                   <div className=\"message-meta\">\n//                     <p id=\"time\">{messageContent.time}</p>\n//                     <p id=\"author\">{messageContent.author}</p>\n//                   </div>\n//                 </div>\n//               </div>\n//             );\n//           })}\n//         </ScrollToBottom>\n//       </div>\n//       <div className=\"chat-footer\">\n//         <input\n//           type=\"text\"\n//           value={currentMessage}\n//           placeholder=\"Hey...\"\n//           onChange={(event) => {\n//             setCurrentMessage(event.target.value);\n//           }}\n//         />\n//         <button onClick={sendMessage}>&#9658;</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Chat;\nconst express = require(\"express\");\nconst app = express();\nconst http = require(\"http\");\nconst cors = require(\"cors\");\nconst { Server } = require(\"socket.io\");\napp.use(cors());\n\nconst server = http.createServer(app);\n\nconst io = new Server(server, {\n  cors: {\n    origin: \"http://localhost:3000\",\n    methods: [\"GET\", \"POST\"],\n  },\n});\n\nio.on(\"connection\", (socket) => {\n  console.log(`User Connected: ${socket.id}`);\n\n  socket.on(\"join_room\", (data) => {\n    socket.join(data);\n    console.log(`User with ID: ${socket.id} joined room: ${data}`);\n  });\n\n  socket.on(\"send_message\", (data) => {\n    socket.to(data.room).emit(\"receive_message\", data);\n  });\n\n  socket.on(\"disconnect\", () => {\n    console.log(\"User Disconnected\", socket.id);\n  });\n});\n\nserver.listen(3001, () => {\n  console.log(\"SERVER RUNNING\");\n});"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,GAAG,GAAGF,OAAO,CAAC,CAAC;AACrB,MAAMG,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEI;AAAO,CAAC,GAAGJ,OAAO,CAAC,WAAW,CAAC;AACvCC,GAAG,CAACI,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;AAEf,MAAMG,MAAM,GAAGJ,IAAI,CAACK,YAAY,CAACN,GAAG,CAAC;AAErC,MAAMO,EAAE,GAAG,IAAIJ,MAAM,CAACE,MAAM,EAAE;EAC5BH,IAAI,EAAE;IACJM,MAAM,EAAE,uBAAuB;IAC/BC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM;EACzB;AACF,CAAC,CAAC;AAEFF,EAAE,CAACG,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAC9BC,OAAO,CAACC,GAAG,CAAE,mBAAkBF,MAAM,CAACG,EAAG,EAAC,CAAC;EAE3CH,MAAM,CAACD,EAAE,CAAC,WAAW,EAAGK,IAAI,IAAK;IAC/BJ,MAAM,CAACK,IAAI,CAACD,IAAI,CAAC;IACjBH,OAAO,CAACC,GAAG,CAAE,iBAAgBF,MAAM,CAACG,EAAG,iBAAgBC,IAAK,EAAC,CAAC;EAChE,CAAC,CAAC;EAEFJ,MAAM,CAACD,EAAE,CAAC,cAAc,EAAGK,IAAI,IAAK;IAClCJ,MAAM,CAACM,EAAE,CAACF,IAAI,CAACG,IAAI,CAAC,CAACC,IAAI,CAAC,iBAAiB,EAAEJ,IAAI,CAAC;EACpD,CAAC,CAAC;EAEFJ,MAAM,CAACD,EAAE,CAAC,YAAY,EAAE,MAAM;IAC5BE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,MAAM,CAACG,EAAE,CAAC;EAC7C,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFT,MAAM,CAACe,MAAM,CAAC,IAAI,EAAE,MAAM;EACxBR,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;AAC/B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}